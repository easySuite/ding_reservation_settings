<?php

/**
 * @file
 * Ding Reservation Settings.
 *
 * Allows users to enable/disable quick reservation.
 */

/**
 * Implements hook_menu().
 */
function ding_reservation_settings_menu() {
  $items = array();

  $items['admin/config/ding/reservation_settings'] = array(
    'title' => 'Reservation settings',
    'description' => 'Configure reservation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_reservation_settings_admin_form'),
    'file' => 'ding_reservation_settings.admin.inc',
    'access arguments' => array('admin config'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ding_reservation_settings_menu_alter(&$items) {
  $items['ting/object/%ting_object/reserve']['page callback'] = 'ding_reservation_settings_reserve_ajax';
}

/**
 * Implement reservation operation.
 *
 * This function is taken from the ding_reservation.
 * @see ding_reservation_reserve_ajax().
 */
function ding_reservation_settings_reserve_ajax($entity, $reservable = NULL) {
  $commands = array();

  // Check if the logged in user is a library user.
  global $user;
  if (!user_is_logged_in()) {
    // Trigger log-in (the reservation link will be triggered on success).
    $commands[] = ajax_command_ding_user_authenticate('');
  }
  elseif (!ding_user_is_provider_user($user)) {
    // Error not library user.
    $commands[] = ajax_command_ding_popup('ding_reservation', t('Error'), '<p>' . t('Only library user can make reservations.') . '</p>');
  }
  elseif (!(is_object($entity) && $entity instanceof TingEntity)) {
    // Error not ting entity.
    $commands[] = ajax_command_ding_popup('ding_reservation', t('Error'), '<p>' . t('Unable to load information about the material.') . '</p>');
  }
  else {
    // Check if reservable object was paste.
    if (is_null($reservable)) {
      // If no object passed assume "normal" reservation (not periodical).
      $reservable = new DingReservationReservableEntity($entity);
    }

    // Try to make reservation.
    try {
      // Check if user have preferred branch and interest period, if so
      // submit the reservation form. If not display another form for with
      // the options to select branch and period.
      $defaults = ding_provider_invoke('reservation', 'default_options', $user);
      $matches = preg_grep("/preferred_branch$/", array_keys($defaults));
      $profile = ding_user_provider_profile($user);

      $user_quick_reservation = $profile->field_quick_reservation[LANGUAGE_NONE][0]['value'];
      $admin_quick_reservation = variable_get('ding_quick_reservation');
      if ($admin_quick_reservation == "0") {
        $quick_reservation = ($user_quick_reservation == "0") ? TRUE : FALSE;
      }
      else {
        $quick_reservation = ($user_quick_reservation == "0") ? FALSE : TRUE;
      }
      if (empty($defaults[array_shift($matches)]) || $quick_reservation) {
        $form = ding_provider_get_form('ding_reservation_reserve_form', $reservable, FALSE);
        $commands[] = ajax_command_ding_popup('ding_reservation', t('Reservation'), render($form));
      }
      else {
        $form_state = array('values' => array());
        drupal_form_submit('ding_reservation_reserve_form', $form_state, $reservable);


        // Return any status messages set by the form.
        $commands[] = ajax_command_ding_popup('ding_reservation', t('Reservation'), theme('status_messages'), array('refresh' => !empty($form_state['reserved'])));
      }
    }
    catch (DingProviderAuthException $exception) {
      // The form may have thrown an Auth exception, so display login. (the
      // reservation link will be triggered on success).
      $commands[] = ajax_command_ding_user_authenticate('');
    }
    catch (Exception $exception) {
      // The form may have thrown an auth exception as the login may have
      // timed-out (the reservation link will be triggered on success).
      $commands[] = ajax_command_ding_popup('ding_reservation', t('Error'), '<p>' . t('Unknown error in reservation, please contact the library.') . '</p>');

      // Log exception.
      watchdog_exception('ding_reservation', $exception);
    }
  }

  // Return the ajax commands as an render array.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Modifies user profile form.
 */
function ding_reservation_settings_form_profile2_edit_provider_fbs_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Get user's "quick reservation" setting.
  $provider = ding_provider_get_provider_module_name('reservation');
  $profile = ding_user_provider_profile($user);
  $field_value = field_get_items('profile2', $profile, 'field_quick_reservation');
  $value = $field_value[0]['value'];

  ding_reservation_settings_field_settings($form, $provider, $value);

  array_unshift($form['#submit'], 'ding_reservation_settings_form_submit');
}

/**
 * Custom form submit for user edit form.
 *
 * @see ding_reservation_settings_form_profile2_edit_provider_fbs_form_alter()
 */
function ding_reservation_settings_form_submit($form, &$form_state) {
  $provider = ding_provider_get_provider_module_name('reservation');
  $values = &$form_state['values']['profile_provider_' . $provider];
  $quick_reservation = variable_get('ding_quick_reservation', FALSE);

  if ($quick_reservation == $values['field_quick_reservation'][LANGUAGE_NONE][0]['value']) {
    $values['field_' . $provider . '_interest_period'][LANGUAGE_NONE][0]['value'] = '';
    // Handle difference in field namings for different providers.
    if ($provider == 'openruth') {
      $values[$provider . '_preferred_branch'][LANGUAGE_NONE][0]['value'] = '_none';
    }
    else {
      $values['field_' . $provider . '_preferred_branch'][LANGUAGE_NONE][0]['value'] = '';
    }
  }
}

/**
 * Applies form config for quick reservation relate fields.
 *
 * @param array $form
 *   Form settings.
 * @param string $provider
 *   Provider identifier.
 * @param bool $user_quick_reservation
 *   Quick reservation value set by user.
 */
function ding_reservation_settings_field_settings(array &$form, $provider, $user_quick_reservation) {
  $quick_reservation = variable_get('ding_quick_reservation', FALSE);

  if ($quick_reservation) {
    $field_title = t('Disable quick reservation.');
    $field_desc = t('If you deactivate "quick"-reservation, you can choose pickup branch and interest period upon each reservation.');
  }
  else {
    $field_title = t('Enable quick reservation.');
    $field_desc = t('If you activate "quick"-reservation, you do not need to choose pickup branch and interest period upon each reservation.');
  }

  // Set field title.
  $form['profile_provider_' . $provider]['field_quick_reservation'][LANGUAGE_NONE]['#title'] = $field_title;
  // Set field description.
  $form['profile_provider_' . $provider]['field_quick_reservation'][LANGUAGE_NONE]['#description'] = $field_desc;

  $form['profile_provider_' . $provider]['field_' . $provider . '_interest_period']['#states'] = array(
    'disabled' => array(
      'input[name="profile_provider_alma[field_quick_reservation][und]"]' => array('checked' => (bool) $quick_reservation),
    ),
  );

  if ($provider == 'openruth') {
    $form['profile_provider_' . $provider][$provider . '_preferred_branch']['#states'] = array(
      'disabled' => array(
        'input[name="profile_provider_' . $provider . '[field_quick_reservation][und]"]' => array('checked' => (bool) $quick_reservation),
      ),
    );
  }
  else {
    $form['profile_provider_' . $provider]['field_' . $provider . '_preferred_branch']['#states'] = array(
      'disabled' => array(
        'input[name="profile_provider_' . $provider . '[field_quick_reservation][und]"]' => array('checked' => (bool) $quick_reservation),
      ),
    );
  }
}
